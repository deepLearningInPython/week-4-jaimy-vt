SuDtrtT3 <- SuD %>%
dplyr::select(contains("T3"), contains("trt")) %>%
mutate(QOHLTHST.T3 = 100 - QOHLTHST.T3) %>%
mutate(trt = ifelse(trt == 'TES', 1, 0)) %>%
drop_na()
BSI <- SuDtrtT3 %>%
dplyr::select(starts_with('BS'))
QoL <- SuDtrtT3 %>%
dplyr::select(starts_with('QO'))
CSS <- SuDtrtT3 %>%
dplyr::select(starts_with('CS'))
scales <- list(
BSI = which(colnames(SuDtrtT3) %in% colnames(BSI)),
QoL = which(colnames(SuDtrtT3) %in% colnames(QoL)),
CSS = which(colnames(SuDtrtT3) %in% colnames(CSS))
)
trtLassoNetworkT3 <- estimateNetwork(SuDtrtT3, default = 'EBICglasso')
plot(trtLassoNetworkT3,
layout = 'spring',
labels = TRUE,
threshold = ,
groups = scales,
theme = 'colorblind'
)
SuDtrtT3 <- SuD %>%
dplyr::select(contains("T3"), contains("trt")) %>%
mutate(QOHLTHST.T3 = 100 - QOHLTHST.T3) %>%
mutate(trt = ifelse(trt == 'TES', 1, 0)) %>%
drop_na()
BSI <- SuDtrtT3 %>%
dplyr::select(starts_with('BS'))
QoL <- SuDtrtT3 %>%
dplyr::select(starts_with('QO'))
CSS <- SuDtrtT3 %>%
dplyr::select(starts_with('CS'))
scales <- list(
BSI = which(colnames(SuDtrtT3) %in% colnames(BSI)),
QoL = which(colnames(SuDtrtT3) %in% colnames(QoL)),
CSS = which(colnames(SuDtrtT3) %in% colnames(CSS))
)
trtLassoNetworkT3 <- estimateNetwork(SuDtrtT3, default = 'EBICglasso')
plot(trtLassoNetworkT3,
layout = 'spring',
labels = TRUE,
threshold = 0.05,
groups = scales,
theme = 'colorblind'
)
SuDtrtT3 <- SuD %>%
dplyr::select(contains("T3"), contains("trt")) %>%
mutate(QOHLTHST.T3 = 100 - QOHLTHST.T3) %>%
mutate(trt = ifelse(trt == 'TES', 1, 0)) %>%
drop_na()
BSI <- SuDtrtT3 %>%
dplyr::select(starts_with('BS'))
QoL <- SuDtrtT3 %>%
dplyr::select(starts_with('QO'))
CSS <- SuDtrtT3 %>%
dplyr::select(starts_with('CS'))
scales <- list(
BSI = which(colnames(SuDtrtT3) %in% colnames(BSI)),
QoL = which(colnames(SuDtrtT3) %in% colnames(QoL)),
CSS = which(colnames(SuDtrtT3) %in% colnames(CSS))
)
trtLassoNetworkT3 <- estimateNetwork(SuDtrtT3, default = 'EBICglasso')
plot(trtLassoNetworkT3,
layout = 'spring',
labels = TRUE,
threshold = 0.1,
groups = scales,
theme = 'colorblind'
)
# Split the data based on treatment group
SuDtrtT3_control <- SuDtrtT3 %>% filter(trt == 0)  # Control group (trt == 0)
SuDtrtT3_treatment <- SuDtrtT3 %>% filter(trt == 1)  # Treatment group (trt == 1)
# Estimate the network for the control group
controlNetwork <- estimateNetwork(SuDtrtT3_control, default = 'EBICglasso')
# Split the data based on treatment group
SuDtrtT3_control <- SuDtrtT3 %>% filter(trt == 0)  # Control group (trt == 0)
View(SuDtrtT3_control)
SuDtrtT3_treatment <- SuDtrtT3 %>%
filter(trt == 1) %>%  # Treatment group (trt == 1)
select(-'trt')
# Split the data based on treatment group
SuDtrtT3_control <- SuDtrtT3 %>%
filter(trt == 0) %>% # Control group (trt == 0)
select(-trt)
# Split the data based on treatment group
SuDtrtT3_control <- SuDtrtT3 %>%
filter(trt == 0) %>% # Control group (trt == 0)
select(-trt)
# Split the data based on treatment group
SuDtrtT3_control <- SuDtrtT3 %>%
filter(trt == 0) %>% # Control group (trt == 0)
select(-'trt')
# Split the data based on treatment group
SuDtrtT3_control <- SuDtrtT3 %>%
filter(trt == 0) %>% # Control group (trt == 0)
select(trt)
# Split the data based on treatment group
SuDtrtT3_control <- SuDtrtT3 %>%
filter(trt == 0) %>% # Control group (trt == 0)
select('trt')
# Split the data based on treatment group
SuDtrtT3_control <- SuDtrtT3 %>%
filter(trt == 0) %>% # Control group (trt == 0)
dyplr::select(-trt)
rm(list=ls())
graphics.off()
knitr::opts_chunk$set(echo = TRUE)
# Loading the necessary libraries
library(tidyverse)
library(psych)
library(gtheory)
library(eRm)
library(lordif)
library(ltm)
library(MPsychoR)
library(poLCA)
library(flexmix)
library(MASS)
library(ggplot2)
library(bootnet)
library(qgraph)
SuD <- read.table("Data/dataset.csv")
SuDtrt <- SuD %>%
dplyr::select(contains("T0"), contains("trt")) %>%
mutate(QOHLTHST.T0 = 100 - QOHLTHST.T0) %>%
mutate(trt = ifelse(trt == 'TES', 1, 0)) %>%
drop_na()
BSI <- SuDtrt %>%
dplyr::select(starts_with('BS'))
QoL <- SuDtrt %>%
dplyr::select(starts_with('QO'))
CSS <- SuDtrt %>%
dplyr::select(starts_with('CS'))
scales <- list(
BSI = which(colnames(SuDtrt) %in% colnames(BSI)),
QoL = which(colnames(SuDtrt) %in% colnames(QoL)),
CSS = which(colnames(SuDtrt) %in% colnames(CSS))
)
trtLassoNetwork <- estimateNetwork(SuDtrt, default = 'EBICglasso')
plot(trtLassoNetwork,
layout = 'spring',
labels = TRUE,
threshold = 0.1,
groups = scales,
theme = 'colorblind'
)
SuDtrtT3 <- SuD %>%
dplyr::select(contains("T3"), contains("trt")) %>%
mutate(QOHLTHST.T3 = 100 - QOHLTHST.T3) %>%
mutate(trt = ifelse(trt == 'TES', 1, 0)) %>%
drop_na()
BSI <- SuDtrtT3 %>%
dplyr::select(starts_with('BS'))
QoL <- SuDtrtT3 %>%
dplyr::select(starts_with('QO'))
CSS <- SuDtrtT3 %>%
dplyr::select(starts_with('CS'))
scales <- list(
BSI = which(colnames(SuDtrtT3) %in% colnames(BSI)),
QoL = which(colnames(SuDtrtT3) %in% colnames(QoL)),
CSS = which(colnames(SuDtrtT3) %in% colnames(CSS))
)
trtLassoNetworkT3 <- estimateNetwork(SuDtrtT3, default = 'EBICglasso')
plot(trtLassoNetworkT3,
layout = 'spring',
labels = TRUE,
threshold = 0.1,
groups = scales,
theme = 'colorblind'
)
# Split the data based on treatment group
SuDtrtT3_control <- SuDtrtT3 %>%
filter(trt == 0) %>% # Control group (trt == 0)
dplyr::select(-trt)
SuDtrtT3_treatment <- SuDtrtT3 %>%
filter(trt == 1) %>%  # Treatment group (trt == 1)
select(-'trt')
View(SuDtrtT3_control)
# Split the data based on treatment group
SuDtrtT3_control <- SuDtrtT3 %>%
filter(trt == 0) %>% # Control group (trt == 0)
dplyr::select(-trt)
SuDtrtT3_treatment <- SuDtrtT3 %>%
filter(trt == 1) %>%  # Treatment group (trt == 1)
dplyr::select(-trt)
# Estimate the network for the control group
controlNetwork <- estimateNetwork(SuDtrtT3_control, default = 'EBICglasso')
plot(controlNetwork, layout = 'spring', labels = TRUE, threshold = 0.1, groups = scales, theme = 'colorblind')
# Estimate the network for the treatment group
treatmentNetwork <- estimateNetwork(SuDtrtT3_treatment, default = 'EBICglasso')
plot(treatmentNetwork, layout = 'spring', labels = TRUE, threshold = 0.1, groups = scales, theme = 'colorblind')
controlNetwork$graph < treatmentNetwork$graph
controlNetwork$graph > treatmentNetwork$graph
controlNetwork$graph < treatmentNetwork$graph
table(controlNetwork$graph < treatmentNetwork$graph)
table(controlNetwork$graph > treatmentNetwork$graph)
# Split the data based on treatment group
SuDtrtT3_control <- SuDtrtT3 %>%
filter(trt == 0) %>% # Control group (trt == 0)
dplyr::select(-trt)
SuDtrtT3_treatment <- SuDtrtT3 %>%
filter(trt == 1) %>%  # Treatment group (trt == 1)
dplyr::select(-trt)
# Estimate the network for the control group
controlNetwork <- estimateNetwork(SuDtrtT3_control, default = 'EBICglasso')
plot(controlNetwork, layout = 'spring', labels = TRUE, threshold = 0.1, groups = scales, theme = 'colorblind')
# Estimate the network for the treatment group
treatmentNetwork <- estimateNetwork(SuDtrtT3_treatment, default = 'EBICglasso')
plot(treatmentNetwork, layout = 'spring', labels = TRUE, threshold = 0.1, groups = scales, theme = 'colorblind')
table(controlNetwork$graph > treatmentNetwork$graph)
table(controlNetwork$graph[upper.tri(controlNetwork$graph)] >
treatmentNetwork$graph[upper.tri(treatmentNetwork$graph)])
# Split the data based on treatment group
SuDtrtT3_control <- SuDtrtT3 %>%
filter(trt == 0) %>% # Control group (trt == 0)
dplyr::select(-trt)
SuDtrtT3_treatment <- SuDtrtT3 %>%
filter(trt == 1) %>%  # Treatment group (trt == 1)
dplyr::select(-trt)
# Estimate the network for the control group
controlNetwork <- estimateNetwork(SuDtrtT3_control, default = 'EBICglasso')
plot(controlNetwork, layout = 'spring', labels = TRUE, threshold = 0.1, groups = scales, theme = 'colorblind')
# Estimate the network for the treatment group
treatmentNetwork <- estimateNetwork(SuDtrtT3_treatment, default = 'EBICglasso')
plot(treatmentNetwork, layout = 'spring', labels = TRUE, threshold = 0.1, groups = scales, theme = 'colorblind')
table(controlNetwork$graph[upper.tri(controlNetwork$graph)] >
treatmentNetwork$graph[upper.tri(treatmentNetwork$graph)])
SuDtrtT3 <- SuD %>%
dplyr::select(contains("T3"), contains("trt")) %>%
mutate(QOHLTHST.T3 = 100 - QOHLTHST.T3) %>%
mutate(trt = ifelse(trt == 'TES', 1, 0)) %>%
drop_na()
BSI <- SuDtrtT3 %>%
dplyr::select(starts_with('BS'))
QoL <- SuDtrtT3 %>%
dplyr::select(starts_with('QO'))
CSS <- SuDtrtT3 %>%
dplyr::select(starts_with('CS'))
scales <- list(
BSI = which(colnames(SuDtrtT3) %in% colnames(BSI)),
QoL = which(colnames(SuDtrtT3) %in% colnames(QoL)),
CSS = which(colnames(SuDtrtT3) %in% colnames(CSS))
)
trtLassoNetworkT3 <- estimateNetwork(SuDtrtT3, default = 'EBICglasso')
plot(trtLassoNetworkT3,
layout = 'spring',
labels = TRUE,
threshold = 0.1,
groups = scales,
theme = 'colorblind'
)
qgraph(trtLassoNetworkT3$graph,
layout = 'spring',
labels = TRUE,
threshold = 0.1,
groups = scales,
theme = 'colorblind'
)
plot
plot
plot(trtLassoNetworkT3,
layout = 'spring',
labels = TRUE,
threshold = 0.1,
groups = scales,
theme = 'colorblind'
)
plot(trtLassoNetworkT3,
layout = 'spring',
labels = TRUE,
#     threshold = 0.1,
groups = scales,
theme = 'colorblind'
)
plot(trtLassoNetwork,
layout = 'spring',
labels = TRUE,
#     threshold = 0.1,
groups = scales,
theme = 'colorblind'
)
SuD <- read.table("Data/dataset.csv")
SuDtrt <- SuD %>%
dplyr::select(contains("T0"), contains("trt")) %>%
mutate(QOHLTHST.T0 = 100 - QOHLTHST.T0) %>%
mutate(trt = ifelse(trt == 'TES', 1, 0)) %>%
drop_na()
BSI <- SuDtrt %>%
dplyr::select(starts_with('BS'))
QoL <- SuDtrt %>%
dplyr::select(starts_with('QO'))
CSS <- SuDtrt %>%
dplyr::select(starts_with('CS'))
scales <- list(
BSI = which(colnames(SuDtrt) %in% colnames(BSI)),
QoL = which(colnames(SuDtrt) %in% colnames(QoL)),
CSS = which(colnames(SuDtrt) %in% colnames(CSS))
)
trtLassoNetwork <- estimateNetwork(SuDtrt, default = 'cor')
plot(trtLassoNetwork,
layout = 'spring',
labels = TRUE,
#     threshold = 0.1,
groups = scales,
theme = 'colorblind'
)
SuDtrtT3 <- SuD %>%
dplyr::select(contains("T3"), contains("trt")) %>%
mutate(QOHLTHST.T3 = 100 - QOHLTHST.T3) %>%
mutate(trt = ifelse(trt == 'TES', 1, 0)) %>%
drop_na()
BSI <- SuDtrtT3 %>%
dplyr::select(starts_with('BS'))
QoL <- SuDtrtT3 %>%
dplyr::select(starts_with('QO'))
CSS <- SuDtrtT3 %>%
dplyr::select(starts_with('CS'))
scales <- list(
BSI = which(colnames(SuDtrtT3) %in% colnames(BSI)),
QoL = which(colnames(SuDtrtT3) %in% colnames(QoL)),
CSS = which(colnames(SuDtrtT3) %in% colnames(CSS))
)
trtLassoNetworkT3 <- estimateNetwork(SuDtrtT3, default = 'cor')
plot(trtLassoNetworkT3,
layout = 'spring',
labels = TRUE,
#     threshold = 0.1,
groups = scales,
theme = 'colorblind'
)
plot(trtLassoNetwork,
layout = 'spring',
labels = TRUE,
threshold = 0.1,
groups = scales,
theme = 'colorblind'
)
plot(trtLassoNetworkT3,
layout = 'spring',
labels = TRUE,
threshold = 0.1,
groups = scales,
theme = 'colorblind'
)
SuD <- read.table("Data/dataset.csv")
SuDtrt <- SuD %>%
dplyr::select(contains("T0"), contains("trt")) %>%
mutate(QOHLTHST.T0 = 100 - QOHLTHST.T0) %>%
mutate(trt = ifelse(trt == 'TES', 1, 0)) %>%
drop_na()
BSI <- SuDtrt %>%
dplyr::select(starts_with('BS'))
QoL <- SuDtrt %>%
dplyr::select(starts_with('QO'))
CSS <- SuDtrt %>%
dplyr::select(starts_with('CS'))
scales <- list(
BSI = which(colnames(SuDtrt) %in% colnames(BSI)),
QoL = which(colnames(SuDtrt) %in% colnames(QoL)),
CSS = which(colnames(SuDtrt) %in% colnames(CSS))
)
trtLassoNetwork <- estimateNetwork(SuDtrt, default = 'EBICglasso')
plot(trtLassoNetwork,
layout = 'spring',
labels = TRUE,
threshold = 0.1,
groups = scales,
theme = 'colorblind'
)
SuDtrtT3 <- SuD %>%
dplyr::select(contains("T3"), contains("trt")) %>%
mutate(QOHLTHST.T3 = 100 - QOHLTHST.T3) %>%
mutate(trt = ifelse(trt == 'TES', 1, 0)) %>%
drop_na()
BSI <- SuDtrtT3 %>%
dplyr::select(starts_with('BS'))
QoL <- SuDtrtT3 %>%
dplyr::select(starts_with('QO'))
CSS <- SuDtrtT3 %>%
dplyr::select(starts_with('CS'))
scales <- list(
BSI = which(colnames(SuDtrtT3) %in% colnames(BSI)),
QoL = which(colnames(SuDtrtT3) %in% colnames(QoL)),
CSS = which(colnames(SuDtrtT3) %in% colnames(CSS))
)
trtLassoNetworkT3 <- estimateNetwork(SuDtrtT3, default = 'EBICglasso')
plot(trtLassoNetworkT3,
layout = 'spring',
labels = TRUE,
threshold = 0.1,
groups = scales,
theme = 'colorblind'
)
SuD <- read.table("Data/dataset.csv")
SuDtrt <- SuD %>%
dplyr::select(contains("T0"), contains("trt")) %>%
mutate(QOHLTHST.T0 = 100 - QOHLTHST.T0) %>%
mutate(trt = ifelse(trt == 'TES', 1, 0)) %>%
drop_na()
BSI <- SuDtrt %>%
dplyr::select(starts_with('BS'))
QoL <- SuDtrt %>%
dplyr::select(starts_with('QO'))
CSS <- SuDtrt %>%
dplyr::select(starts_with('CS'))
scales <- list(
BSI = which(colnames(SuDtrt) %in% colnames(BSI)),
QoL = which(colnames(SuDtrt) %in% colnames(QoL)),
CSS = which(colnames(SuDtrt) %in% colnames(CSS))
)
trtLassoNetwork <- estimateNetwork(SuDtrt, default = 'EBICglasso')
plot(trtLassoNetwork,
layout = 'spring',
labels = TRUE,
#     threshold = 0.1,
groups = scales,
theme = 'colorblind'
)
SuDtrtT3 <- SuD %>%
dplyr::select(contains("T3"), contains("trt")) %>%
mutate(QOHLTHST.T3 = 100 - QOHLTHST.T3) %>%
mutate(trt = ifelse(trt == 'TES', 1, 0)) %>%
drop_na()
BSI <- SuDtrtT3 %>%
dplyr::select(starts_with('BS'))
QoL <- SuDtrtT3 %>%
dplyr::select(starts_with('QO'))
CSS <- SuDtrtT3 %>%
dplyr::select(starts_with('CS'))
scales <- list(
BSI = which(colnames(SuDtrtT3) %in% colnames(BSI)),
QoL = which(colnames(SuDtrtT3) %in% colnames(QoL)),
CSS = which(colnames(SuDtrtT3) %in% colnames(CSS))
)
trtLassoNetworkT3 <- estimateNetwork(SuDtrtT3, default = 'EBICglasso')
plot(trtLassoNetworkT3,
layout = 'spring',
labels = TRUE,
threshold = 0.1,
groups = scales,
theme = 'colorblind'
)
SuDtrtT3 <- SuD %>%
dplyr::select(contains("T3"), contains("trt")) %>%
mutate(QOHLTHST.T3 = 100 - QOHLTHST.T3) %>%
mutate(trt = ifelse(trt == 'TES', 1, 0)) %>%
drop_na()
BSI <- SuDtrtT3 %>%
dplyr::select(starts_with('BS'))
QoL <- SuDtrtT3 %>%
dplyr::select(starts_with('QO'))
CSS <- SuDtrtT3 %>%
dplyr::select(starts_with('CS'))
scales <- list(
BSI = which(colnames(SuDtrtT3) %in% colnames(BSI)),
QoL = which(colnames(SuDtrtT3) %in% colnames(QoL)),
CSS = which(colnames(SuDtrtT3) %in% colnames(CSS))
)
trtLassoNetworkT3 <- estimateNetwork(SuDtrtT3, default = 'EBICglasso')
plot(trtLassoNetworkT3,
layout = 'spring',
labels = TRUE,
#     threshold = 0.1,
groups = scales,
theme = 'colorblind'
)
graphics.off()
rm(list=ls())
quizes <- c((32/32), (12/12), (23/25), (21/25), (19/20), (17.5/20), (16/19),
(13.5/19), (13/20), (18.67/24))
exam <- 309/420
source("~/.active-rstudio-document", echo=TRUE)
mean(quizes)
mean(assignments)
exam
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
grade <- exam * exam_weight +
assignments * assignment_weights +
quizes * quiz_weights
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
print(grade)
grade <- round((exam * exam_weight +
assignments * assignment_weight +
quizes * quiz_weight * 10), 2)
print(grade)
grade <- round(((exam * exam_weight +
assignments * assignment_weight +
quizes * quiz_weight) * 10), 2)
print(grade)
round(grade)
graphics.off()
rm(list=ls())
reticulate::repl_python()
setwd("~/OneDrive/Documenten/UvA/Master/Semester 1/Deep Learning in Python/Week 4/week-4-jaimy-vt")
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
python --version
conda --version
library(reticulate)
use_python("C:\Users\jaimy\AppData\Local\Microsoft\WindowsApps\python.exe", required = TRUE)
library(reticulate)
use_python("C:/Users/jaimy/AppData/Local/Microsoft/WindowsApps/python.exe", required = TRUE)
install.packages("reticulate")
reticulate::repl_python()
reticulate::repl_python()
